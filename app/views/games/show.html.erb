<!DOCTYPE html>
<html>
<head>
  <title>Jeu de Yams</title>
  <%= csrf_meta_tags %>
  <link
    href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    rel="stylesheet"
  />
  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
  ></script>
  <style>
    body {
      background-image: url('<%= asset_path("background.jpg") %>');
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      background-attachment: fixed;
    }
    .centered-content {
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      background-color: rgba(255, 255, 255, 0.9); /* Couche blanche transparente */
      padding: 20px;
      border-radius: 15px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }
    .die {
      width: 100px;
    }
  </style>
</head>
<body>
  <div class="container centered-content">
    <!-- Header -->
    <header class="text-center mb-5">
      <h1 class="display-4 text-primary">Jeu de Yams ðŸŽ²</h1>
      <h2 class="text-secondary">
        Joueur actuel : <span id="current-player" class="fw-bold"><%= @players[@current_player_index].name %></span>
      </h2>
      <p class="text-muted">
        Lancers restants : <span id="roll-count" class="fw-bold"><%= 3 - @roll_count %></span>
      </p>
    </header>

    <!-- Dice Container -->
    <div id="dice-container" class="d-flex justify-content-center flex-wrap mb-4">
      <% 5.times do |index| %>
        <div class="die m-2 text-center border rounded p-3 shadow-sm">
          <p class="fs-3" id="die-<%= index %>">0</p>
          <label>
            <input type="checkbox" class="keep-die" data-index="<%= index %>">
            Garder
          </label>
        </div>
      <% end %>
    </div>

    <!-- Buttons -->
    <div id="button-container" class="text-center">
      <button id="roll-dice" class="btn btn-primary btn-lg me-3">Lancer les dÃ©s</button>
      <button id="next-player" class="btn btn-success btn-lg" disabled>Joueur suivant</button>
    </div>

    <!-- Score Modal -->
    <div class="modal fade" id="scoreModal" tabindex="-1" aria-labelledby="scoreModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="scoreModalLabel">Tableau des Scores</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="score-form">
              <table class="table table-bordered text-center">
                <thead>
                  <tr>
                    <th>Combinaison</th>
                    <th>Choix</th>
                  </tr>
                </thead>
                <tbody>
                  <% @combinations.each do |combination, used| %>
                    <tr>
                      <td><%= combination.capitalize %></td>
                      <td>
                        <input type="radio" name="score" value="<%= combination %>" <%= "disabled" if used %>>
                      </td>
                    </tr>
                  <% end %>
                </tbody>
              </table>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
            <button type="button" id="submit-score" class="btn btn-primary">Valider</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Back to Home -->
    <div class="text-center mt-4">
      <%= link_to "Retour Ã  l'accueil", root_path, class: "btn btn-link" %>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const rollDiceButton = document.getElementById("roll-dice");
      const nextPlayerButton = document.getElementById("next-player");
      const diceContainer = document.getElementById("dice-container");
      const currentPlayer = document.getElementById("current-player");
      const rollCount = document.getElementById("roll-count");

      function resetDiceToZero() {
        Array.from(document.querySelectorAll(".die p")).forEach(die => {
          die.textContent = "0";
        });
        document.querySelectorAll(".keep-die").forEach(checkbox => {
          checkbox.checked = false;
        });
      }

      rollDiceButton.addEventListener("click", () => {
        const keptDiceIndices = Array.from(document.querySelectorAll(".keep-die:checked"))
          .map(checkbox => parseInt(checkbox.dataset.index));

        fetch("<%= roll_dice_game_path(@game.id) %>", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']").content
          },
          body: JSON.stringify({ kept_dice: keptDiceIndices })
        })
          .then(response => response.json())
          .then(data => {
            data.dice.forEach((value, index) => {
              document.getElementById(`die-${index}`).textContent = value;
            });
            rollCount.textContent = 3 - data.roll_count;

            if (data.roll_count === 0) {
              const scoreModal = new bootstrap.Modal(document.getElementById("scoreModal"));
              scoreModal.show();
            }
          });
      });

      document.getElementById("submit-score").addEventListener("click", () => {
        const selectedScore = document.querySelector('input[name="score"]:checked');
        if (!selectedScore) {
          alert("Veuillez sÃ©lectionner une combinaison.");
          return;
        }

        fetch("<%= save_score_game_path(@game.id) %>", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']").content
          },
          body: JSON.stringify({ combination: selectedScore.value })
        }).then(response => {
          if (!response.ok) {
            throw new Error("Erreur lors de l'enregistrement du score.");
          }
          const scoreModal = bootstrap.Modal.getInstance(document.getElementById("scoreModal"));
          scoreModal.hide();
          nextPlayerButton.disabled = false;
        });
      });

      nextPlayerButton.addEventListener("click", () => {
        fetch("<%= next_player_game_path(@game.id) %>", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']").content
          },
        }).then(response => response.json()).then(data => {
          currentPlayer.textContent = data.current_player_name;
          resetDiceToZero();
          rollCount.textContent = 3;
        });
      });
    });
  </script>
</body>
</html>
